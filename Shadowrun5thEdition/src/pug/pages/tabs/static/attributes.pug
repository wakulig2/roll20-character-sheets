.pc-row
  .header
    .triangle
    h1(data-i18n='attributes')
  .border-box
    .pc-box.medium-box.attributes
      input.settings-toggle(type="checkbox" name="attr_flag_attribute" checked)
      span.pictos.text-lowercase x
      .grid.attribute
        .col
          each value in coreAttributeArray
            .grid.attribute-row
              +attributeRow(value)
          .grid.attribute-row
            input(type="hidden" name=`attr_edge` value="0" )
            .col
              button.text-right.eclipse(data-i18n='edge' type="roll" name=`roll_edge` value!=rollBeginging+`{{header=^{edge}}}{{base=^{attributes}}}{{dice=[[(@{edge}+(@{attribute_roll})+@{wounds_toggle}${rollEnding}`)
            .col
              .row-long
                .settings
                  input(type="number" name=`attr_edge` value="" placeholder="3" title=`@{edge}`)
                .display
                  .mt-2.text-center.d-block
                    span(name=`attr_edge` title=`@{edge}`)
          .grid.edge-row
            input(class="hex-highlight" type="hidden" name="attr_edge_hex" value="0")
            input(class="edge-hider" type="hidden" name="attr_edge" value="1")
            - let edgeCounter = 1
            while edgeCounter <= 8
              .grid.edge
                input(type="checkbox" name="attr_edge_hex" value=edgeCounter++)
                div.hexagon
        .col
          input.character-type(name='attr_flag_special' type='hidden' value='mundane')
          .grid.attribute-row
            .col
              .row-long
                h3(data-i18n='essence')
            .col
              .row-long
                .settings
                  label.mt-2(data-i18n-title='essence')
                    input(type="text" min="0" name="attr_essence" placeholder="6" title="@{essence}")
                .display
                  .mt-2.text-center.d-block
                    span(name="attr_essence" title="@{essence}")
          .grid.attribute-row.magic
            +attributeRow('magic')
          .grid.attribute-row.resonance
            +attributeRow('resonance')
          each value in ['initiative', 'matrix', 'astral']
            .grid.attribute-row
              +initiative(value)
          each value in ['composure', 'judge intentions', 'memory', 'lift carry']
            .grid.attribute-row
              +commonRolls(value)
          .grid.attribute-row
            input(type="hidden" name="attr_walk" value="12")
            input(type="hidden" name="attr_run" value="24")
            .col
              .row-long
                h3(data-i18n='movement')
            .col
              .row-long
                .settings
                    label.mt-2(data-i18n-title='walk modifier')
                      input(type="number" min="0" name="attr_walk_modifier" placeholder="6" title="@{walk_modifier}")
                    span /
                    label.mt-2(data-i18n-title='run modifier')
                      input(type="number" min="0" name="attr_run_modifier" placeholder="6" title="@{run_modifier}")
                    span / +
                    label.mt-2(data-i18n-title='movement modifier')
                      input(type="number" min="0" name="attr_movement_mod" placeholder="2" title="@{movement_mod}")
                .display
                    .mt-2.text-center.d-block
                      span(name="attr_walk" title="@{walk}")
                      span.tiny /
                      span(name="attr_run" title="@{run}")
                      span.tiny / +
                      span(name="attr_movement_mod" title="@{movement_mod}")
        .grid.limits-row
          - const limits = ['physical', 'mental', 'social']
          each value in limits
            -const i18n = `${value}limit`
            .grid.limit
              .col
                h3.eclipse(data-i18n=i18n)
              .col
                .settings
                  label(data-i18n-title=i18n)
                    input(type="number" name=`attr_${value}_limit_modifier` placeholder="0" title=`@{${value}_limit_modifier}`)
                  span.tiny =
                  span(name=`attr_${value}_limit` title=`@{${value}_limit}`)
                .display
                  span.d-block.text-center(name=`attr_${value}_limit` title=`@{${value}_limit}`)

          